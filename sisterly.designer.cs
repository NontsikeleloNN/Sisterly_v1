#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sisterly_v1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GirlCodeHackdb")]
	public partial class sisterlyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCollaboration(Collaboration instance);
    partial void UpdateCollaboration(Collaboration instance);
    partial void DeleteCollaboration(Collaboration instance);
    partial void InsertCollabRequest(CollabRequest instance);
    partial void UpdateCollabRequest(CollabRequest instance);
    partial void DeleteCollabRequest(CollabRequest instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRegUser(RegUser instance);
    partial void UpdateRegUser(RegUser instance);
    partial void DeleteRegUser(RegUser instance);
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertSkillUser(SkillUser instance);
    partial void UpdateSkillUser(SkillUser instance);
    partial void DeleteSkillUser(SkillUser instance);
    #endregion
		
		public sisterlyDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GirlCodeHackdbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public sisterlyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sisterlyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sisterlyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sisterlyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Collaboration> Collaborations
		{
			get
			{
				return this.GetTable<Collaboration>();
			}
		}
		
		public System.Data.Linq.Table<CollabRequest> CollabRequests
		{
			get
			{
				return this.GetTable<CollabRequest>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<RegUser> RegUsers
		{
			get
			{
				return this.GetTable<RegUser>();
			}
		}
		
		public System.Data.Linq.Table<Skill> Skills
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<SkillUser> SkillUsers
		{
			get
			{
				return this.GetTable<SkillUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Collaboration")]
	public partial class Collaboration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private int _UserID;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<RegUser> _RegUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Collaboration()
		{
			this._Project = default(EntityRef<Project>);
			this._RegUser = default(EntityRef<RegUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Collaboration", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Collaborations.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Collaborations.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Collaboration", Storage="_RegUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegUser RegUser
		{
			get
			{
				return this._RegUser.Entity;
			}
			set
			{
				RegUser previousValue = this._RegUser.Entity;
				if (((previousValue != value) 
							|| (this._RegUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegUser.Entity = null;
						previousValue.Collaborations.Remove(this);
					}
					this._RegUser.Entity = value;
					if ((value != null))
					{
						value.Collaborations.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollabRequest")]
	public partial class CollabRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ProjectID;
		
		private int _UserID;
		
		private string _RequestStatus;
		
		private System.DateTime _DateMade;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<RegUser> _RegUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRequestStatusChanging(string value);
    partial void OnRequestStatusChanged();
    partial void OnDateMadeChanging(System.DateTime value);
    partial void OnDateMadeChanged();
    #endregion
		
		public CollabRequest()
		{
			this._Project = default(EntityRef<Project>);
			this._RegUser = default(EntityRef<RegUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestStatus", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string RequestStatus
		{
			get
			{
				return this._RequestStatus;
			}
			set
			{
				if ((this._RequestStatus != value))
				{
					this.OnRequestStatusChanging(value);
					this.SendPropertyChanging();
					this._RequestStatus = value;
					this.SendPropertyChanged("RequestStatus");
					this.OnRequestStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateMade", DbType="DateTime NOT NULL")]
		public System.DateTime DateMade
		{
			get
			{
				return this._DateMade;
			}
			set
			{
				if ((this._DateMade != value))
				{
					this.OnDateMadeChanging(value);
					this.SendPropertyChanging();
					this._DateMade = value;
					this.SendPropertyChanged("DateMade");
					this.OnDateMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CollabRequest", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.CollabRequests.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.CollabRequests.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_CollabRequest", Storage="_RegUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegUser RegUser
		{
			get
			{
				return this._RegUser.Entity;
			}
			set
			{
				RegUser previousValue = this._RegUser.Entity;
				if (((previousValue != value) 
							|| (this._RegUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegUser.Entity = null;
						previousValue.CollabRequests.Remove(this);
					}
					this._RegUser.Entity = value;
					if ((value != null))
					{
						value.CollabRequests.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Title;
		
		private string _PostImage;
		
		private int _Likes;
		
		private EntityRef<RegUser> _RegUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPostImageChanging(string value);
    partial void OnPostImageChanged();
    partial void OnLikesChanging(int value);
    partial void OnLikesChanged();
    #endregion
		
		public Post()
		{
			this._RegUser = default(EntityRef<RegUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostImage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PostImage
		{
			get
			{
				return this._PostImage;
			}
			set
			{
				if ((this._PostImage != value))
				{
					this.OnPostImageChanging(value);
					this.SendPropertyChanging();
					this._PostImage = value;
					this.SendPropertyChanged("PostImage");
					this.OnPostImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Likes", DbType="Int NOT NULL")]
		public int Likes
		{
			get
			{
				return this._Likes;
			}
			set
			{
				if ((this._Likes != value))
				{
					this.OnLikesChanging(value);
					this.SendPropertyChanging();
					this._Likes = value;
					this.SendPropertyChanged("Likes");
					this.OnLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Post", Storage="_RegUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegUser RegUser
		{
			get
			{
				return this._RegUser.Entity;
			}
			set
			{
				RegUser previousValue = this._RegUser.Entity;
				if (((previousValue != value) 
							|| (this._RegUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegUser.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._RegUser.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Title;
		
		private string _TimeFrame;
		
		private int _NumPeople;
		
		private byte _IsActive;
		
		private string _ProjectDetails;
		
		private string _ProjectImage;
		
		private string _ProjectStatus;
		
		private decimal _RATING;
		
		private string _MentorDescription;
		
		private EntitySet<Collaboration> _Collaborations;
		
		private EntitySet<CollabRequest> _CollabRequests;
		
		private EntityRef<RegUser> _RegUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTimeFrameChanging(string value);
    partial void OnTimeFrameChanged();
    partial void OnNumPeopleChanging(int value);
    partial void OnNumPeopleChanged();
    partial void OnIsActiveChanging(byte value);
    partial void OnIsActiveChanged();
    partial void OnProjectDetailsChanging(string value);
    partial void OnProjectDetailsChanged();
    partial void OnProjectImageChanging(string value);
    partial void OnProjectImageChanged();
    partial void OnProjectStatusChanging(string value);
    partial void OnProjectStatusChanged();
    partial void OnRATINGChanging(decimal value);
    partial void OnRATINGChanged();
    partial void OnMentorDescriptionChanging(string value);
    partial void OnMentorDescriptionChanged();
    #endregion
		
		public Project()
		{
			this._Collaborations = new EntitySet<Collaboration>(new Action<Collaboration>(this.attach_Collaborations), new Action<Collaboration>(this.detach_Collaborations));
			this._CollabRequests = new EntitySet<CollabRequest>(new Action<CollabRequest>(this.attach_CollabRequests), new Action<CollabRequest>(this.detach_CollabRequests));
			this._RegUser = default(EntityRef<RegUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFrame", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TimeFrame
		{
			get
			{
				return this._TimeFrame;
			}
			set
			{
				if ((this._TimeFrame != value))
				{
					this.OnTimeFrameChanging(value);
					this.SendPropertyChanging();
					this._TimeFrame = value;
					this.SendPropertyChanged("TimeFrame");
					this.OnTimeFrameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumPeople", DbType="Int NOT NULL")]
		public int NumPeople
		{
			get
			{
				return this._NumPeople;
			}
			set
			{
				if ((this._NumPeople != value))
				{
					this.OnNumPeopleChanging(value);
					this.SendPropertyChanging();
					this._NumPeople = value;
					this.SendPropertyChanged("NumPeople");
					this.OnNumPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="TinyInt NOT NULL")]
		public byte IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectDetails", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectDetails
		{
			get
			{
				return this._ProjectDetails;
			}
			set
			{
				if ((this._ProjectDetails != value))
				{
					this.OnProjectDetailsChanging(value);
					this.SendPropertyChanging();
					this._ProjectDetails = value;
					this.SendPropertyChanged("ProjectDetails");
					this.OnProjectDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectImage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProjectImage
		{
			get
			{
				return this._ProjectImage;
			}
			set
			{
				if ((this._ProjectImage != value))
				{
					this.OnProjectImageChanging(value);
					this.SendPropertyChanging();
					this._ProjectImage = value;
					this.SendPropertyChanged("ProjectImage");
					this.OnProjectImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatus", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectStatus
		{
			get
			{
				return this._ProjectStatus;
			}
			set
			{
				if ((this._ProjectStatus != value))
				{
					this.OnProjectStatusChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatus = value;
					this.SendPropertyChanged("ProjectStatus");
					this.OnProjectStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RATING", DbType="Decimal(18,0) NOT NULL")]
		public decimal RATING
		{
			get
			{
				return this._RATING;
			}
			set
			{
				if ((this._RATING != value))
				{
					this.OnRATINGChanging(value);
					this.SendPropertyChanging();
					this._RATING = value;
					this.SendPropertyChanged("RATING");
					this.OnRATINGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MentorDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MentorDescription
		{
			get
			{
				return this._MentorDescription;
			}
			set
			{
				if ((this._MentorDescription != value))
				{
					this.OnMentorDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MentorDescription = value;
					this.SendPropertyChanged("MentorDescription");
					this.OnMentorDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Collaboration", Storage="_Collaborations", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Collaboration> Collaborations
		{
			get
			{
				return this._Collaborations;
			}
			set
			{
				this._Collaborations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_CollabRequest", Storage="_CollabRequests", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<CollabRequest> CollabRequests
		{
			get
			{
				return this._CollabRequests;
			}
			set
			{
				this._CollabRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Project", Storage="_RegUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegUser RegUser
		{
			get
			{
				return this._RegUser.Entity;
			}
			set
			{
				RegUser previousValue = this._RegUser.Entity;
				if (((previousValue != value) 
							|| (this._RegUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegUser.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._RegUser.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collaborations(Collaboration entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Collaborations(Collaboration entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_CollabRequests(CollabRequest entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_CollabRequests(CollabRequest entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegUser")]
	public partial class RegUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Email;
		
		private string _UserName;
		
		private string _UserPassword;
		
		private string _Surname;
		
		private string _FieldOfStudy;
		
		private char _IsMentor;
		
		private string _MentorDescription;
		
		private EntitySet<Collaboration> _Collaborations;
		
		private EntitySet<CollabRequest> _CollabRequests;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<SkillUser> _SkillUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnFieldOfStudyChanging(string value);
    partial void OnFieldOfStudyChanged();
    partial void OnIsMentorChanging(char value);
    partial void OnIsMentorChanged();
    partial void OnMentorDescriptionChanging(string value);
    partial void OnMentorDescriptionChanged();
    #endregion
		
		public RegUser()
		{
			this._Collaborations = new EntitySet<Collaboration>(new Action<Collaboration>(this.attach_Collaborations), new Action<Collaboration>(this.detach_Collaborations));
			this._CollabRequests = new EntitySet<CollabRequest>(new Action<CollabRequest>(this.attach_CollabRequests), new Action<CollabRequest>(this.detach_CollabRequests));
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._SkillUsers = new EntitySet<SkillUser>(new Action<SkillUser>(this.attach_SkillUsers), new Action<SkillUser>(this.detach_SkillUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldOfStudy", DbType="VarChar(255)")]
		public string FieldOfStudy
		{
			get
			{
				return this._FieldOfStudy;
			}
			set
			{
				if ((this._FieldOfStudy != value))
				{
					this.OnFieldOfStudyChanging(value);
					this.SendPropertyChanging();
					this._FieldOfStudy = value;
					this.SendPropertyChanged("FieldOfStudy");
					this.OnFieldOfStudyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMentor", DbType="Char(1) NOT NULL")]
		public char IsMentor
		{
			get
			{
				return this._IsMentor;
			}
			set
			{
				if ((this._IsMentor != value))
				{
					this.OnIsMentorChanging(value);
					this.SendPropertyChanging();
					this._IsMentor = value;
					this.SendPropertyChanged("IsMentor");
					this.OnIsMentorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MentorDescription", DbType="VarChar(255)")]
		public string MentorDescription
		{
			get
			{
				return this._MentorDescription;
			}
			set
			{
				if ((this._MentorDescription != value))
				{
					this.OnMentorDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MentorDescription = value;
					this.SendPropertyChanged("MentorDescription");
					this.OnMentorDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Collaboration", Storage="_Collaborations", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Collaboration> Collaborations
		{
			get
			{
				return this._Collaborations;
			}
			set
			{
				this._Collaborations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_CollabRequest", Storage="_CollabRequests", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<CollabRequest> CollabRequests
		{
			get
			{
				return this._CollabRequests;
			}
			set
			{
				this._CollabRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Post", Storage="_Posts", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_Project", Storage="_Projects", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_SkillUser", Storage="_SkillUsers", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<SkillUser> SkillUsers
		{
			get
			{
				return this._SkillUsers;
			}
			set
			{
				this._SkillUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Collaborations(Collaboration entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = this;
		}
		
		private void detach_Collaborations(Collaboration entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = null;
		}
		
		private void attach_CollabRequests(CollabRequest entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = this;
		}
		
		private void detach_CollabRequests(CollabRequest entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = null;
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = null;
		}
		
		private void attach_SkillUsers(SkillUser entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = this;
		}
		
		private void detach_SkillUsers(SkillUser entity)
		{
			this.SendPropertyChanging();
			entity.RegUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SkillName;
		
		private EntitySet<SkillUser> _SkillUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSkillNameChanging(string value);
    partial void OnSkillNameChanged();
    #endregion
		
		public Skill()
		{
			this._SkillUsers = new EntitySet<SkillUser>(new Action<SkillUser>(this.attach_SkillUsers), new Action<SkillUser>(this.detach_SkillUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SkillName
		{
			get
			{
				return this._SkillName;
			}
			set
			{
				if ((this._SkillName != value))
				{
					this.OnSkillNameChanging(value);
					this.SendPropertyChanging();
					this._SkillName = value;
					this.SendPropertyChanged("SkillName");
					this.OnSkillNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_SkillUser", Storage="_SkillUsers", ThisKey="ID", OtherKey="SkillID")]
		public EntitySet<SkillUser> SkillUsers
		{
			get
			{
				return this._SkillUsers;
			}
			set
			{
				this._SkillUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SkillUsers(SkillUser entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_SkillUsers(SkillUser entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkillUser")]
	public partial class SkillUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _SkillID;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<RegUser> _RegUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSkillIDChanging(int value);
    partial void OnSkillIDChanged();
    #endregion
		
		public SkillUser()
		{
			this._Skill = default(EntityRef<Skill>);
			this._RegUser = default(EntityRef<RegUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._RegUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkillID", DbType="Int NOT NULL")]
		public int SkillID
		{
			get
			{
				return this._SkillID;
			}
			set
			{
				if ((this._SkillID != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkillIDChanging(value);
					this.SendPropertyChanging();
					this._SkillID = value;
					this.SendPropertyChanged("SkillID");
					this.OnSkillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_SkillUser", Storage="_Skill", ThisKey="SkillID", OtherKey="ID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.SkillUsers.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.SkillUsers.Add(this);
						this._SkillID = value.ID;
					}
					else
					{
						this._SkillID = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegUser_SkillUser", Storage="_RegUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public RegUser RegUser
		{
			get
			{
				return this._RegUser.Entity;
			}
			set
			{
				RegUser previousValue = this._RegUser.Entity;
				if (((previousValue != value) 
							|| (this._RegUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegUser.Entity = null;
						previousValue.SkillUsers.Remove(this);
					}
					this._RegUser.Entity = value;
					if ((value != null))
					{
						value.SkillUsers.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("RegUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
